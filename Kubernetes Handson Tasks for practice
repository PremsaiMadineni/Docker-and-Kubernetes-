1.	Prepare sample dockerfile to print hello-kubernetes Message
 -> docker images  
 -> Docker ps -a   -to check docker files
 -> Vi Dockerfile  
FROM ubuntu
MAINTAINER premsai <madinenipremsai65@gmail.com>
RUN apt-get update
CMD [“echo”, “Hello world…. From my first docker file”]
-> docker build .
 -> docker images
-> docker run <imagetag>

---------------------------------------------------------------------------------------------
2) Deploy kubernets Deployment 
-> kubectl version
	We need to install local cluster there are multiple  option like : minikube, k3s, kind, microk8s .
Im going with minikube install
  url : https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+downlaproad
->apt install minitube
Install pods : www.kubernets pod
->vi pod.yml
  apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
----------
We can see pod created or not  by using :- ->kubectl create -f pod.yml
-> kubectl pods
 -> kubectl get pods -o wide    ->we can ip address
By using this command we can see whether pod running or not :-
curl <copy ip address>
 ->For logs: kubectl logs <name or ip address>
By using this command we can see all pod info :-
->kubectl describe pod <name or ip address>
---
example 2:-
Create deployment.yml: www.kubernets deployment
->vim deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
---
Im create one pod:
->kubectl apply -f deployment.yml
 ->kubectl get deploy
-> kubectl get pods
->To check replicaset cmd: kubectl get rs
Delete the pos cmd:  kubectl delete pod <name or ip address>
by using this command we can see all pods:  kubectl get all
by using this command we can see all pods and namespaces:   kubectl get all -A

Deploy->rs->pods
--------------------------------------------------------------------------------------------
-->expose nginx service with cluster ip service

pod  -> deployment service
Accessing networking:-
curl -L http://192.168.0.7:80/<path>

Create service yaml file :-
www.kubernets service
	vi service.yml
	apiVersion: v1
	kind: Service
	metadata:
	  name: my-service
	spec:
	  type: NodePort
	  selector:
	    app.kubernetes.io/name: nginx
	  ports:
	    - port: 80
	      targetPort: 80
	      nodePort: 30007

->kubectl apply -f service.yml
By using this command we can see entry traffic: -
-> kubectl get svc -v=9
 -> kubectl get svc
To check ip address : hostname -i
-> Curl -L  http://ipaddress:port
To access port eidt svc :-  kubectl svc edit <name>
-> kubectl get svc

----------------------------------------------------------------------------------------------------------
--> deploy ingress for nginx app 

www.kubernets ingress
	vi ingress.yml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-example
spec:
  rules:
  - host: "foo.bar.com"
    http:
      paths:
      - pathType: Prefix
        path: "/bar"
        backend:
          service:
            name: service1
            port:
              number: 80

to check service :- kubectl get svc
-> kubectl apply -f ingress.yml
-> kubectl get ingress
Note: kubectl created but address is empty
Now we create ingress controller 
www. ambassador ingress controller

1.	First, clone the Starter Kit repository and change directory to your local copy.

      git clone https://github.com/digitalocean/Kubernetes-Starter-Kit-Developers.git
      cd Kubernetes-Starter-Kit-Developers

-> kubectl get pods -A | grep nginx
To check logs:
-> kubectl logs ingress-nginx-controller-9b8f55cc5-nbb4x -n ingress-nginx

---------------------------------------------------------------------------------------------------------------

 

 






 
